package org.mm3.data;

import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

/**
 * Created by CowbyJim on 7/8/15.
 */
public class ByteStreamParserTest {

    final byte testData[] =
            {0x3f, 0x0a, 0x0d, 0x3f, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x0a, 0x0d, 0x53, 0x79, 0x73,
                    0x74, 0x65, 0x6d, 0x20, 0x75, 0x70, 0x0a, 0x0d, 0x05, 0x27, 0x5b, 0x04, 0x01, 0x60, 0x03, 0x01,
                    0x00, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04,
                    0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x06, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 0x04, 0x0a,
                    0x27, 0x3e, 0x04, 0x02, 0x60, 0x03, 0x02, 0x00, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x08, 0x06, 0x04, 0x01,
                    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x08, 0x06, 0x04, 0x01, 0x01,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27, 0x40, 0x04, 0x03, 0x60, 0x03, 0x03, 0x00, 0x00,
                    (byte) 0xff, (byte) 0xff, (byte) 0xff, 0x08, 0x06, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff,
                    (byte) 0xff, (byte) 0xff, 0x08, 0x06, 0x04, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0a, 0x27, (byte) 0xf8,
                    0x04, 0x04, 0x60, 0x03, 0x04, 0x00, 0x00, (byte) 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x02, 0x05, 0x27, (byte) 0xfa, 0x04, 0x05, 0x61, 0x03, 0x05, 0x00, 0x00, (byte) 0xff, 0x24,
                    0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x24, 0x0d,
                    0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, (byte) 0xf3, 0x04, 0x06,
                    0x61, 0x03, 0x06, 0x00, 0x00, (byte) 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x24, 0x0d, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
                    0x00, 0x02, 0x05, 0x27, (byte) 0xf6, 0x04, 0x07, 0x61, 0x03, 0x07, 0x00, 0x00, (byte) 0xff, 0x24, 0x0d, 0x00,
                    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, (byte) 0xff, 0x24, 0x0d, 0x00, 0x00,
                    0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, (byte) 0xfd, 0x04, 0x00, 0x61, 0x03,
                    0x08, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                    0x02, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                    0x05, 0x27, 0x00, 0x04, 0x01, 0x61, 0x03, 0x09, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00,
                    0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01,
                    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, (byte) 0xf9, 0x04, 0x02, 0x61, 0x03, 0x0a, 0x00,
                    0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                    0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27,
                    (byte) 0xfc, 0x04, 0x03, 0x61, 0x03, 0x0b, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01,
                    0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00,
                    0x00, 0x00, 0x00, 0x00, 0x02, 0x0a, 0x27, 0x41, 0x04, 0x04, 0x61, 0x03, 0x0c, 0x00, 0x00, 0x06,
                    0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x01,
                    0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27, 0x44, 0x04,
                    0x05, 0x61, 0x03, 0x0d, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x02, 0x0a, 0x27, 0x3d, 0x04, 0x06, 0x61, 0x03, 0x0e, 0x00, 0x00, 0x06, 0x01, 0x00,
                    0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x06, 0x01, 0x00, 0x00,
                    0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x05, 0x27, 0x40, 0x04, 0x07, 0x61};
    final byte singleDataPacket[] = new byte[]{0x05, 0x27, (byte) 0x93, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x1C, 0x60, (byte) 0x9A,
            (byte) 0xB3, (byte) 0xCC, (byte) 0xE9, (byte) 0xff, (byte) 0xff, (byte) 0xF1, (byte) 0xD8, (byte) 0xBF, (byte) 0x9A,
            0x60, 0x19, 0x03, 0x1C, 0x60, (byte) 0x9A, (byte) 0xB3, (byte) 0xCC, (byte) 0xE9, (byte) 0xff, (byte) 0xff, (byte) 0xF1,
            (byte) 0xD8, (byte) 0xBF, (byte) 0x9A, 0x60, 0x19};
    protected ByteStreamParser byteStreamParser;

    @BeforeMethod
    public void setUp() throws Exception {
        byteStreamParser = new ByteStreamParser();
        byteStreamParser.setCallback(new Callback());


    }

    @Test
    public void testBytesReceived() throws Exception {

        // ByteBuffer buffer = ByteBuffer.allocate(256);

        for (int i = 0; i < testData.length; i++) {
            byte singleByteArray[] = new byte[1];
            singleByteArray[0] = testData[i];
            byteStreamParser.bytesReceived(singleByteArray);

        }
    }

    @Test
    public void testFindPacket() throws Exception {

    }

    class Callback implements PacketReceivedCallback {


        @Override
        public void packetReceived(MM3DataPacket packet) {
            System.out.println("Packet callback received");
            System.out.println(packet);
        }
    }
}